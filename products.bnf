!<program> ::= <definition>+

!<definition> ::= <supercombinator> | <data-type-decl>

!<supercombinator> ::= <function-decl> | <variable-decl>

!<function-decl> ::= <identifier> "::" <type-signature>
                    <identifier> <patterns> "=" <expression>

!<variable-decl> ::= <identifier> "::" <type-signature>
                    <identifier> "=" <expression>

# data declaration! (параметризованный)
!<data-type-decl> ::= "data" <type-constructor> <type-parameters>? "=" <constructors>
!<type-parameters> ::= <type-variable>+

!<constructors> ::= <constructor> ("|" <constructor>)*
!<constructor> ::= <constructor-name> <field-types>?

!<field-types> ::= <type>+
# ----------------

!<type-constructor> ::= [A-Z][a-zA-Z0-9_]*
!<constructor-name> ::= [A-Z][a-zA-Z0-9_]*

!<type-signature> ::= <type> ("->" <type-signature>)*
!<type> ::= <simple-type> | "(" <type-signature> ")"

!<simple-type> ::= "Int" 
                | "Float" 
                | "Char" 
                | "Bool" 
                | "[" <type> "]" 
                | <type-constructor> <type-arguments>?
!<type-arguments> ::= <type>+

!<patterns> ::= <pattern>+
!<pattern> ::= <variable-pattern>
            | <literal-pattern>
            | <constructor-pattern>
            | <wildcard-pattern>
            | <list-pattern>

!<variable-pattern> ::= <identifier>
!<literal-pattern> ::= <literal>
!<wildcard-pattern> ::= "_"
!<constructor-pattern> ::= <constructor-name> <patterns>?
!<list-pattern> ::= "[" <list-patterns> "]"
!<list-patterns> ::= ε | <pattern> ("," <pattern>)*

!<expression> ::= <let-expression>
            | <if-expression> 
            | <lambda-expression>
            | <logical-or-expression>
            # | LIST_COMPR

!<let-expression> ::= "let" <bindings> "in" <expression>
!<if-expression> ::= "if" <expression> "then" <expression> "else" <expression>
!<lambda-expression> ::= "\\" <patterns> "->" <expression>

# infix expression
!<logical-or-expression> ::= <logical-and-expression> ("||" <logical-and-expression>)*
!<logical-and-expression> ::= <comparison-expression> ("&&" <comparison-expression>)*
!<comparison-expression> ::= <additive-expression> 
                        ( ("==" | "/=" | "<" | ">" | "<=" | ">=") <additive-expression> )*
!<additive-expression> ::= <multiplicative-expression> ( ("+" | "-") <multiplicative-expression> )*
!<multiplicative-expression> ::= <application> ( ("*" | "/") <application> )*
!<application> ::= <primary>+
!<primary> ::= <literal>
            | <identifier>
            | <constructor-name>
            | <list-comprehension>
            | "(" <expression> ")"
            | "[" <list-elements> "]"
!<list-elements> ::= ε | <expression> ("," <expression>)*
# ----------

!<list-comprehension> ::= "[" <expression> "|" <qualifiers> "]"
!<qualifiers> ::= <qualifier> ("," <qualifier>)*
!<qualifier> ::= <identifier> "<-" <expression> | <expression>

!<bindings> ::= <bind> ("," <bind>)*
!<bind> ::= <identifier> "=" <expression> | <identifier> <patterns> "=" <expression>

!<literal> ::= <int-literal> | <float-literal> | <char-literal> | "True" | "False"
!<int-literal> ::= [0-9]+
!<float-literal> ::= [0-9]+ "." [0-9]+ ([eE] [+-]? [0-9]+)?
!<char-literal> ::= "'" <character> "'"
!<identifier> ::= [a-z][a-zA-Z0-9_']*