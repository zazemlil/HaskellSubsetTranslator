#{ 5 
S -> DEFINITIONS

DEFINITIONS -> DEFINITION DEFINITIONS`
DEFINITIONS` -> DEFINITION DEFINITIONS`
        | ε

DEFINITION -> SIGNATURE SUPERCOMBINATOR
        | DATA_DATA_TYPE_DECL

SIGNATURE -> id "::" DATA_TYPE_SIGNATURE
#} 5


#{ 6
DATA_TYPE_SIGNATURE -> data_type DATA_TYPE_SIGNATURE`
DATA_TYPE_SIGNATURE` -> "->" data_type DATA_TYPE_SIGNATURE`
        | ε

data_type -> SIMPLE_DATA_TYPE
        | "(" DATA_TYPE_SIGNATURE ")"

SIMPLE_DATA_TYPE -> "Int"
        | "Float"
        | "Char"
        | "Bool"
        | LIST_DATA_TYPE
        | data_type DATA_TYPE_ARGUMENTS

LIST_DATA_TYPE -> "[" data_type "]"

DATA_TYPE_ARGUMENTS -> data_type DATA_TYPE_ARGUMENTS`
DATA_TYPE_ARGUMENTS` -> data_type DATA_TYPE_ARGUMENTS`
        | ε
#} 6


#{ 7
SUPERCOMBINATOR -> FUNCTION_DECL
        |  VARIABLE_DECL

FUNCTION_DECL -> id PATTERNS "=" EXPR FUNCTION_DECL`
FUNCTION_DECL` -> id PATTERNS "=" EXPR FUNCTION_DECL`
        | ε
VARIABLE_DECL -> id "=" EXPR
#} 7


#{ 8 (нужно ли параметризованное определение?)
DATA_DATA_TYPE_DECL -> "data" data_type DATA_TYPE_DECL
DATA_TYPE_DECL -> "=" CONSTRUCTORS
        | DATA_TYPE_PARAMETERS "=" CONSTRUCTORS

DATA_TYPE_PARAMETERS -> DATA_TYPE_VARIABLE DATA_TYPE_PARAMETERS`
DATA_TYPE_PARAMETERS` -> DATA_TYPE_VARIABLE DATA_TYPE_PARAMETERS`
        | ε

CONSTRUCTORS -> CONS CONSTRUCTORS`
CONSTRUCTORS` -> "|" CONS CONSTRUCTORS`
        | ε
CONS -> data_type 
        | data_type FIELD_DATA_TYPES
FIELD_DATA_TYPES -> data_type FIELD_DATA_TYPES`
FIELD_DATA_TYPES` -> data_type FIELD_DATA_TYPES`
        | ε
#} 8


#{ 4
PATTERNS -> PATTERN PATTERNS`
PATTERNS` -> PATTERN PATTERNS`
        | ε

PATTERN -> id
        | LITERAL
        | "_"
        | CONSTRUCTOR_PATTERN
        | LIST_PATTERN

CONSTRUCTOR_PATTERN -> data_type PATTERNS
        | data_type

LIST_PATTERN -> "[" LIST_PATTERNS "]"
        | "(" id ":" id ")"
LIST_PATTERNS -> PATTERN LIST_PATTERNS`
        | ε
LIST_PATTERNS` -> "," PATTERN LIST_PATTERNS`
        | ε
#} 4


#{ 3
LIST_COMPREHENSION -> "[" EXPR "|" QUALIFIERS "]"
QUALIFIERS -> QUALIFIER QUALIFIERS`
QUALIFIERS` -> "," QUALIFIER QUALIFIERS`
        | ε
QUALIFIER -> id "<-" EXPR
        | EXPR
#} 3


#{ 2
LET_EXPR -> "let" BINDINGS "in" EXPR
IF_EXPR -> "if" EXPR "then" EXPR "else" EXPR
LAMBDA_EXPR -> "\\" PATTERNS "->" EXPR

BINDINGS -> BIND BINDINGS`
BINDINGS` -> "," BIND BINDINGS`
        | ε
BIND -> id "=" EXPR 
        | id PATTERNS "=" EXPR 
#} 2


#{ 9
INFIX_EXPR -> AND_EXPR OR_EXPR
OR_EXPR -> "||" AND_EXPR OR_EXPR
        | ε

AND_EXPR -> COMP_EXPR AND_EXPR`
AND_EXPR` -> "&&" COMP_EXPR AND_EXPR`
        | ε

COMP_EXPR -> ADDITIVE_EXPR COMP_EXPR`
COMP_EXPR` -> COMP_OP ADDITIVE_EXPR COMP_EXPR`
        | ε
COMP_OP -> "==" | "/=" | "<" | ">" | "<=" | ">="

ADDITIVE_EXPR -> MULTIPLICATIVE_EXPR ADDITIVE_EXPR`
ADDITIVE_EXPR` -> ADDITIVE_OP MULTIPLICATIVE_EXPR ADDITIVE_EXPR`
        | ε
ADDITIVE_OP -> "+" | "-"

MULTIPLICATIVE_EXPR -> APPLICATION MULTIPLICATIVE_EXPR`
MULTIPLICATIVE_EXPR` -> ("*" | "/") APPLICATION MULTIPLICATIVE_EXPR`
        | ε

APPLICATION -> PRIMARY APPLICATION`
APPLICATION` -> PRIMARY APPLICATION`
        | ε

PRIMARY -> LITERAL
        | id
        | data_type
        | LIST_COMPREHENSION
        | "(" EXPR ")"
        | "[" LIST_ELEMENTS "]"
LIST_ELEMENTS -> EXPR LIST_ELEMENTS`
        | ε
LIST_ELEMENTS` -> "," EXPR LIST_ELEMENTS`
        | ε
#} 9


#{ 1
EXPR -> LET_EXPR
        | IF_EXPR
        | LAMBDA_EXPR
        | LIST_COMPREHENSION
        | INFIX_EXPR


LITERAL -> num_int
        | num_float
        | char
        | "True"
        | "False"

id -> [a-z][a-zA-z|0-9]*
data_type -> [A-Z][a-zA-z|0-9]*
num_int -> [-]?[0-9]+
num_float -> [-]?[0-9]+"."[0-9]+
char -> "'"[a-zA-z|0-9]"'"
#} 1

#+ case of, + паттерн-мэтчинг, + вызов функции  
# не LL(1)-грамматика (без левой факторизации)