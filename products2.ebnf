#{ 5 (+ pattern-matching)
S -> DEFINITIONS

DEFINITIONS -> DEFINITION DEFINITIONS`
DEFINITIONS` -> DEFINITION DEFINITIONS`
        | ε

DEFINITION -> SIGNATURE SUPERCOMBINATOR
        | DATA_TYPE_DECL

SIGNATURE -> IDENTIFIER "::" TYPE_SIGNATURE
#} 5


#{ 6
TYPE_SIGNATURE -> TYPE TYPE_SIGNATURE`
TYPE_SIGNATURE` -> "->" TYPE TYPE_SIGNATURE`
        | ε

TYPE -> SIMPLE_TYPE
        | "(" TYPE_SIGNATURE ")"

SIMPLE_TYPE -> "Int"
        | "Float"
        | "Char"
        | "Bool"
        | LIST_TYPE
        | TYPE_CONSTRUCTOR TYPE_ARGUMENTS

LIST_TYPE -> "[" TYPE "]"

TYPE_ARGUMENTS -> TYPE TYPE_ARGUMENTS`
TYPE_ARGUMENTS` -> TYPE TYPE_ARGUMENTS`
        | ε
#} 6


#{ 7
SUPERCOMBINATOR -> IDENTIFIER DECL

DECL -> FUNCTION_DECL
        | VARIABLE_DECL

FUNCTION_DECL -> PATTERNS "=" EXPR
VARIABLE_DECL -> "=" EXPR
#} 7


#{ 8 (нужно ли параметризованное определение?)
DATA_TYPE_DECL -> "data" TYPE_CONSTRUCTOR TYPE_DECL
TYPE_DECL -> "=" CONSTRUCTORS
        | TYPE_PARAMETERS "=" CONSTRUCTORS

TYPE_PARAMETERS -> TYPE_VARIABLE TYPE_PARAMETERS`
TYPE_PARAMETERS` -> TYPE_VARIABLE TYPE_PARAMETERS`
        | ε

CONSTRUCTORS -> CONS CONSTRUCTORS`
CONSTRUCTORS` -> "|" CONS CONSTRUCTORS`
        | ε
CONS -> TYPE_CONSTRUCTOR 
        | TYPE_CONSTRUCTOR FIELD_TYPES
FIELD_TYPES -> TYPE FIELD_TYPES`
FIELD_TYPES` -> TYPE FIELD_TYPES`
        | ε
#} 8


#{ 4
PATTERNS -> PATTERN PATTERNS`
PATTERNS` -> PATTERN PATTERNS`
        | ε

PATTERN -> IDENTIFIER
        | LITERAL
        | "_"
        | CONSTRUCTOR_PATTERN
        | LIST_PATTERN

CONSTRUCTOR_PATTERN -> TYPE_CONSTRUCTOR PATTERNS
        | TYPE_CONSTRUCTOR

LIST_PATTERN -> "[" LIST_PATTERNS "]"
        | "(" IDENTIFIER ":" IDENTIFIER ")"
LIST_PATTERNS -> PATTERN LIST_PATTERNS`
        | ε
LIST_PATTERNS` -> "," PATTERN LIST_PATTERNS`
        | ε
#} 4


#{ 3
LIST_COMPREHENSION -> "[" EXPR "|" QUALIFIERS "]"
QUALIFIERS -> QUALIFIER QUALIFIERS`
QUALIFIERS` -> "," QUALIFIER QUALIFIERS`
        | ε
QUALIFIER -> IDENTIFIER "<-" EXPR
        | EXPR
#} 3


#{ 2
LET_EXPR -> "let" BINDINGS "in" EXPR
IF_EXPR -> "if" EXPR "then" EXPR "else" EXPR
LAMBDA_EXPR -> "\\" PATTERNS "->" EXPR

BINDINGS -> BIND BINDINGS`
BINDINGS` -> "," BIND BINDINGS`
        | ε
BIND -> IDENTIFIER "=" EXPR 
        | IDENTIFIER PATTERNS "=" EXPR 
#} 2


#{
INFIX_EXPR -> AND_EXPR OR_EXPR`
OR_EXPR` -> "||" AND_EXPR OR_EXPR`
        | ε

AND_EXPR -> COMP_EXPR AND_EXPR`
AND_EXPR` -> "&&" COMP_EXPR AND_EXPR
        | ε

COMP_EXPR -> ADDITIVE_EXPR COMP_EXPR`
COMP_EXPR` -> ("==" | "/=" | "<" | ">" | "<=" | ">=") ADDITIVE_EXPR COMP_EXPR`
        | ε

ADDITIVE_EXPR -> MULTIPLICATIVE_EXPR ADDITIVE_EXPR`
ADDITIVE_EXPR` -> ("+" | "-") MULTIPLICATIVE_EXPR ADDITIVE_EXPR`
        | ε

MULTIPLICATIVE_EXPR -> APPLICATION MULTIPLICATIVE_EXPR`
MULTIPLICATIVE_EXPR` -> ("*" | "/") APPLICATION MULTIPLICATIVE_EXPR`
        | ε

APPLICATION -> PRIMARY APPLICATION`
APPLICATION` -> PRIMARY APPLICATION`
        | ε

PRIMARY -> LITERAL
        | IDENTIFIER
        | TYPE_CONSTRUCTOR
        | LIST_COMPREHENSION
        | "(" EXPR ")"
        | "[" LIST_ELEMENTS "]"
LIST_ELEMENTS -> EXPR LIST_ELEMENTS`
        | ε
LIST_ELEMENTS` -> "," EXPR LIST_ELEMENTS`
        | ε
#}


#{ 1
EXPR -> LET_EXPR
        | IF_EXPR
        | LAMBDA_EXPR
        | LIST_COMPREHENSION
        | INFIX_EXPR
#} 1


#{ 0
LITERAL -> LITERAL_INT
        | LITERAL_FLOAT
        | LITERAL_CHAR
        | "True"
        | "False"

IDENTIFIER -> [a-z][a-zA-z|0-9]*
TYPE_CONSTRUCTOR -> [A-Z][a-zA-z|0-9]*
LITERAL_INT -> [0-9]+
LITERAL_FLOAT -> [0-9]+"."[0-9]+
LITERAL_CHAR -> "'"[a-zA-z|0-9]"'"
#} 0

#+ case of, + паттерн-мэтчинг, + вызов функции  
# не LL(1)-грамматика